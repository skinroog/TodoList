{"version":3,"sources":["js/model.js","js/view.js","js/controller.js","js/script.js"],"names":["Model","todos","JSON","parse","localStorage","getItem","todoText","todo","id","length","text","complete","push","_commit","updatedText","forEach","filter","callback","onTodoListChanged","setItem","stringify","View","handler","todoList","addEventListener","event","target","matches","_temporaryTodoText","parentElement","app","getElement","title","createElement","textContent","date","Date","getDate","months","getMonth","getFullYear","form","input","type","name","placeholder","submitButton","append","_initLocalListeners","tagName","className","element","document","selector","querySelector","value","firstChild","remove","replaceText","li","checkbox","checked","label","setAttribute","span","classList","add","button","preventDefault","_todoText","_resetInput","Controller","model","view","displayTodo","addTodo","editTodo","deleteTodo","toggleTodo","bindAddTodo","handleAddTodo","bindDeleteTodo","handleDeleteTodo","bindToggleTodo","handleToggleTodo","bindEditTodo","handleEditTodo","bindTodoListChanged"],"mappings":"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","file":"script.40292d3f.js","sourceRoot":"..\\src","sourcesContent":["export default class Model {\n  constructor() {\n    this.todos = JSON.parse(localStorage.getItem('todos')) || [];\n  }\n\n  addTodo(todoText) {\n    const todo = {\n      id: this.todos.length === 0 ? 1 : this.todos[this.todos.length - 1].id + 1,\n      text: todoText,\n      complete: false,\n    };\n\n    this.todos.push(todo);\n\n    this._commit(this.todos);\n  }\n\n  editTodo(id, updatedText) {\n    this.todos.forEach((todo) => {\n      if (todo.id === id) todo.text = updatedText;\n    });\n\n    this._commit(this.todos);\n  }\n\n  deleteTodo(id) {\n    this.todos = this.todos.filter((todo) => todo.id !== id);\n\n    this._commit(this.todos);\n  }\n\n  toggleTodo(id) {\n    this.todos.forEach((todo) => {\n      if (todo.id === id) todo.complete = !todo.complete;\n    });\n\n    this._commit(this.todos);\n  }\n\n  bindTodoListChanged(callback) {\n    this.onTodoListChanged = callback;\n  }\n\n  _commit(todos) {\n    this.onTodoListChanged(this.todos);\n    localStorage.setItem('todos', JSON.stringify(this.todos));\n  }\n}\n","export default class View {\n  constructor() {\n    this.app = this.getElement('#app');\n\n    this.title = this.createElement('h1', 'app__title');\n    this.title.textContent = 'Todos';\n\n    this.date = this.createElement('p', 'app__date');\n    const date = new Date();\n    const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\n    this.date.textContent = `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\n\n    this.form = this.createElement('form', 'form');\n\n    this.input = this.createElement('input', 'form__input');\n    this.input.type = 'text';\n    this.input.name = 'todo';\n    this.input.placeholder = 'Добавить задачу...';\n\n    this.submitButton = this.createElement('button', 'form__submit');\n\n    this.todoList = this.createElement('ul', 'todolist');\n\n    this.form.append(this.input, this.submitButton);\n\n    this.app.append(this.title, this.date, this.form, this.todoList);\n\n    this._temporaryTodoText = '';\n    this._initLocalListeners();\n  }\n\n  createElement(tagName, className) {\n    const element = document.createElement(tagName);\n    if (className) element.className = className;\n\n    return element;\n  }\n\n  getElement(selector) {\n    const element = document.querySelector(selector);\n\n    return element;\n  }\n\n  get _todoText() {\n    return this.input.value;\n  }\n\n  _resetInput() {\n    this.input.value = '';\n  }\n\n  displayTodo(todos) {\n    while (this.todoList.firstChild) {\n      this.todoList.firstChild.remove();\n    }\n\n    if (todos.length === 0) {\n      const replaceText = this.createElement('p', 'app__replace-text');\n      replaceText.textContent = 'В списке пусто. Желаете добавить задачу?';\n      this.todoList.append(replaceText);\n    } else {\n      todos.forEach(todo => {\n        const li = this.createElement('li', 'todolist__item');\n        li.id = todo.id;\n\n        const checkbox = this.createElement('input', 'todolist__item-checkbox');\n        checkbox.type = 'checkbox';\n        checkbox.id = `checkbox${li.id}`;\n        checkbox.checked = todo.complete;\n\n        const label = this.createElement('label', 'todolist__item-checkbox-label');\n        label.setAttribute('for', `checkbox${li.id}`);\n\n        const span = this.createElement('span', 'todolist__item-text');\n        span.textContent = todo.text;\n        span.setAttribute('contenteditable', true);\n\n        if (todo.complete) {\n          span.classList.add('todolist__item-text--checked');\n        }\n\n        const button = this.createElement('button', 'todolist__button-delete');\n\n        li.append(checkbox, label, span, button);\n\n        this.todoList.append(li);\n      });\n    }\n  }\n\n  bindAddTodo(handler) {\n    this.form.addEventListener('submit', (event) => {\n      event.preventDefault();\n\n      if (this._todoText) {\n        handler(this._todoText);\n        this._resetInput();\n      }\n    });\n  }\n\n  bindDeleteTodo(handler) {\n    this.todoList.addEventListener('click', (event) => {\n      if (!event.target.matches('.todolist__button-delete')) return;\n\n      const id = +event.target.parentElement.id;\n      handler(id);\n    });\n  }\n\n  bindToggleTodo(handler) {\n    this.todoList.addEventListener('change', (event) => {\n      if (!event.target.matches('.todolist__item-checkbox')) return;\n\n      const id = +event.target.parentElement.id;\n      handler(id);\n    });\n  }\n\n  _initLocalListeners() {\n    this.todoList.addEventListener('input', (event) => {\n      if (!event.target.matches('.todolist__item-text')) return;\n\n      this._temporaryTodoText = event.target.textContent;\n    });\n  }\n\n  bindEditTodo = (handler) => {\n    this.todoList.addEventListener('focusout', (event) => {\n      if (!event.target.matches('.todolist__item-text')) return;\n\n      if (!this._temporaryTodoText) return;\n\n      const id = +event.target.parentElement.id;\n      handler(id, this._temporaryTodoText);\n      this._temporaryTodoText = '';\n    });\n  }\n}\n","export default class Controller {\n  constructor(model, view) {\n    this.model = model;\n    this.view = view;\n\n    this.onTodoListChanged(this.model.todos);\n\n    this.view.bindAddTodo(this.handleAddTodo);\n    this.view.bindDeleteTodo(this.handleDeleteTodo);\n    this.view.bindToggleTodo(this.handleToggleTodo);\n    this.view.bindEditTodo(this.handleEditTodo);\n    this.model.bindTodoListChanged(this.onTodoListChanged);\n  }\n\n  onTodoListChanged = (todos) => {\n    this.view.displayTodo(todos);\n  }\n\n  handleAddTodo = (todoText) => {\n    this.model.addTodo(todoText);\n  }\n\n  handleEditTodo = (id, updatedText) => {\n    this.model.editTodo(id, updatedText);\n  }\n\n  handleDeleteTodo = (id) => {\n    this.model.deleteTodo(id);\n  }\n\n  handleToggleTodo = (id) => {\n    this.model.toggleTodo(id);\n  }\n}\n","'use strict';\n\nimport Model from './model';\nimport View from './view';\nimport Controller from './controller';\n\nconst app = new Controller(new Model(), new View());\n"]}